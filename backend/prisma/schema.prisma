// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Group {
  id                Int              @id @default(autoincrement())
  name              String           @unique
  description       String
  photoUrl          String
  goalRep           Int
  discordWebhookUrl String
  discordInviteUrl  String
  tag               Tag[]
  owner             User             @relation("UserOwnedGroups", fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId           Int
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  badge             String[]
  rank              Rank[]
  groupRecommend    GroupRecommend[]
  Participants      Participant[]
}

model GroupRecommend {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int

  @@unique([groupId, userId])
}

model Tag {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  group     Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId   Int
}

model User {
  id             Int              @id @default(autoincrement())
  nickname       String           @unique
  password       String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  exerciseRecord ExerciseRecord[]
  groupRecommend GroupRecommend[]
  ownedGroups    Group[]          @relation("UserOwnedGroups")
  Participant    Participant[]
}

model Participant {
  id      Int   @id @default(autoincrement())
  user    User  @relation(fields: [userId], references: [id])
  userId  Int
  group   Group @relation(fields: [groupId], references: [id])
  groupId Int

  @@unique([userId, groupId])
}

model ExerciseRecord {
  id          Int      @id @default(autoincrement())
  nickname    String
  sport       String
  description String
  duration    Int
  distance    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  photo       Photo[]
}

model Rank {
  id            Int      @id @default(autoincrement())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  group         Group    @relation(fields: [groupId], references: [id], onDelete: Cascade)
  groupId       Int      @unique
  weeklyRanked  Int[] // 0번 부터 기록 많은 유저 id 등록
  monthlyRanked Int[] // 0번 부터 기록 많은 유저 id 등록
}

model Photo {
  id               Int            @id
  url              String
  photoTag         PhotoTag
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  exerciseRecord   ExerciseRecord @relation(fields: [exerciseRecordId], references: [id])
  exerciseRecordId Int
}

enum PhotoTag {
  GROUP
  EXERCISERECORD
}